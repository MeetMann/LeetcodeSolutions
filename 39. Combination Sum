class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if (candidates == null) {
            return null;
        }

        List<List<Integer>> result = new ArrayList<>();

        calculateCombination(candidates, target, 0, new ArrayList<Integer>(), result);

        return result;
    }

    public void calculateCombination(int[] candidates, int target, int index, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<Integer>(current));
            return;
        }

        for (int i = index; i < candidates.length; i++) {
            if (candidates[i] <= target) {
                current.add(candidates[i]);
                calculateCombination(candidates, target - candidates[i], i, current, result);
                current.remove(Integer.valueOf(candidates[i]));
            }
        }
    }
}
