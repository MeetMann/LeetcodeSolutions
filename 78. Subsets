// First solution I thought of
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<Integer>(), nums, -1);

        return result;
    }

    public void backtrack(List<List<Integer>> result, ArrayList<Integer> current, int[] nums, int index) {
        if (!result.contains(current)) {
            result.add(new ArrayList<Integer>(current));
        }
            for (int i = 0; i < nums.length; i++) {
                if (current.contains(nums[i]) || i < index) {
                    continue;
                }
                current.add(nums[i]);  
                backtrack(result, current, nums, i);
                current.remove(Integer.valueOf(nums[i]));
            }
        }
    }

// Optimal solution
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> result = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(result, new ArrayList<>(), nums, 0);
    return result;
}

private void backtrack(List<List<Integer>> result, List<Integer> current, int [] nums, int start){
    result.add(new ArrayList<>(current));
    for(int i = start; i < nums.length; i++){
        current.add(nums[i]);
        backtrack(result, current, nums, i + 1);
        current.remove(current.size() - 1);
        }
    }
}
